// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subdomains.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteSubdomainByID = `-- name: DeleteSubdomainByID :exec
DELETE from subdomains WHERE id = $1
`

func (q *Queries) DeleteSubdomainByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubdomainByID, id)
	return err
}

const insertSubdomain = `-- name: InsertSubdomain :one
INSERT INTO subdomains (
    id,
    name,
    domain_id,
    created_at,
    updated_at
)
VALUES (
    gen_random_uuid(), $1, $2, NOW(), NOW()
)

ON CONFLICT (name) DO UPDATE SET
    updated_at = NOW()
RETURNING id, name, domain_id, created_at, updated_at
`

type InsertSubdomainParams struct {
	Name     string
	DomainID uuid.UUID
}

func (q *Queries) InsertSubdomain(ctx context.Context, arg InsertSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRowContext(ctx, insertSubdomain, arg.Name, arg.DomainID)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DomainID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lookupSubdomainByID = `-- name: LookupSubdomainByID :one
SELECT id, name, domain_id, created_at, updated_at FROM subdomains WHERE id = $1
`

func (q *Queries) LookupSubdomainByID(ctx context.Context, id uuid.UUID) (Subdomain, error) {
	row := q.db.QueryRowContext(ctx, lookupSubdomainByID, id)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DomainID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lookupSubdomainByName = `-- name: LookupSubdomainByName :one
SELECT 
    s.id,
    s.name,
    s.domain_id,
    d.name as domain_name, 
    s.created_at,
    s.updated_at
FROM subdomains s 
JOIN domains d ON s.domain_id = d.id WHERE s.name = $1
`

type LookupSubdomainByNameRow struct {
	ID         uuid.UUID
	Name       string
	DomainID   uuid.UUID
	DomainName string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) LookupSubdomainByName(ctx context.Context, name string) (LookupSubdomainByNameRow, error) {
	row := q.db.QueryRowContext(ctx, lookupSubdomainByName, name)
	var i LookupSubdomainByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DomainID,
		&i.DomainName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lookupSubdomainsByDomainID = `-- name: LookupSubdomainsByDomainID :many
SELECT
    s.id,
    s.name,
    s.domain_id, 
    d.name as domain_name,
    s.created_at,
    s.updated_at
FROM subdomains s 
JOIN domains d ON s.domain_id = d.id WHERE d.id = $1
`

type LookupSubdomainsByDomainIDRow struct {
	ID         uuid.UUID
	Name       string
	DomainID   uuid.UUID
	DomainName string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) LookupSubdomainsByDomainID(ctx context.Context, id uuid.UUID) ([]LookupSubdomainsByDomainIDRow, error) {
	rows, err := q.db.QueryContext(ctx, lookupSubdomainsByDomainID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LookupSubdomainsByDomainIDRow
	for rows.Next() {
		var i LookupSubdomainsByDomainIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DomainID,
			&i.DomainName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
