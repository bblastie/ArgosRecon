// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subdomains.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertSubdomain = `-- name: InsertSubdomain :one
INSERT INTO subdomains (
    id,
    name,
    domain_id,
    created_at,
    updated_at
)
VALUES (
    gen_random_uuid(), $1, $2, NOW(), NOW()
)

ON CONFLICT (name) DO UPDATE SET
    updated_at = NOW()
RETURNING id, name, domain_id, created_at, updated_at
`

type InsertSubdomainParams struct {
	Name     string
	DomainID uuid.UUID
}

func (q *Queries) InsertSubdomain(ctx context.Context, arg InsertSubdomainParams) (Subdomain, error) {
	row := q.db.QueryRowContext(ctx, insertSubdomain, arg.Name, arg.DomainID)
	var i Subdomain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DomainID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lookupSubdomain = `-- name: LookupSubdomain :one
SELECT 
    s.id,
    s.name,
    s.domain_id,
    d.name as domain_name,  -- Add this via JOIN
    s.created_at,
    s.updated_at
FROM subdomains s 
JOIN domains d ON s.domain_id = d.id WHERE s.name = $1
`

type LookupSubdomainRow struct {
	ID         uuid.UUID
	Name       string
	DomainID   uuid.UUID
	DomainName string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) LookupSubdomain(ctx context.Context, name string) (LookupSubdomainRow, error) {
	row := q.db.QueryRowContext(ctx, lookupSubdomain, name)
	var i LookupSubdomainRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DomainID,
		&i.DomainName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
